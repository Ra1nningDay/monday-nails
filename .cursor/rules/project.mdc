---
alwaysApply: true
---

# Project Structure & Rules — README for Cursor

This README provides a clear project structure and working rules for maintaining the project inside **Cursor**. It ensures consistency, readability, and easier onboarding for new developers.

---

## 📂 Project Structure

```bash
project-root/
├── public/             # Static assets (images, favicon, og.jpg, etc.)
├── src/
│   ├── components/     # Reusable UI components (e.g., Button, Card, Navbar)
│   ├── pages/          # App/page entry points (if Next.js)
│   ├── styles/         # Global styles, CSS variables, Tailwind config
│   ├── utils/          # Helper functions (formatters, validators)
│   ├── hooks/          # Custom React hooks
│   └── services/       # External services (APIs, form handlers, etc.)
├── .env.local          # Local environment variables
├── package.json        # Dependencies & scripts
├── README.md           # Project documentation (this file)
└── tsconfig.json       # TypeScript configuration (if used)
```

---

## 📝 Rules & Conventions

### 1. **Naming Conventions**

- **Files & Folders** → `kebab-case` (e.g., `chat-messages.tsx`).
- **Components** → `PascalCase` (e.g., `AdviceCard.tsx`).
- **Variables & Functions** → `camelCase`.
- **Constants & Enums** → `UPPER_SNAKE_CASE`.

### 2. **Code Style**

- Use **Prettier + ESLint** for auto-formatting.
- Keep line length ≤ **100 characters**.
- Use **TypeScript strict mode** — avoid `any`.
- Prefer **functional components** with hooks.

### 3. **Git Rules**

- Branch naming: `feature/...`, `fix/...`, `chore/...`, `docs/...`.
- Commit messages follow [Conventional Commits](https://www.conventionalcommits.org):
  - `feat: add booking form`
  - `fix: resolve advice card loading issue`
  - `chore: update dependencies`
  - `docs: add project rules to README`

### 4. **Components**

- Must be **reusable** and **stateless** when possible.
- Always define `Props` interfaces in TypeScript.
- Keep styles in **Tailwind classes** or local CSS modules.
- Use **shadcn/ui** & **lucide-react** for consistency.

### 5. **SEO & Accessibility**

- Each page must include `<title>`, meta description, and **Open Graph tags**.
- All images require `alt` attributes.
- Provide **skip links** for accessibility.
- Ensure keyboard navigation works.

### 6. **Testing**

- Unit tests → **Vitest / Jest**.
- Integration/E2E → **Playwright**.
- Test files must follow: `ComponentName.test.tsx`.

### 7. **Deployment**

- Deploy via **Vercel**.
- Database: **Neon (Postgres)**.
- Forms: **Formspree** or LINE OA integration.
- Use `.env.local` for secrets.

### 8. **Cursor Rules**

- Always create a **task issue** before coding.
- Use AI-generated code suggestions, but **review & refactor manually**.
- Document important decisions inside `docs/`.
- Keep **README updated** when adding/removing modules.

---

## 🚀 Quick Start

```bash
# install dependencies
pnpm install

# run development server
pnpm dev

# build production
pnpm build && pnpm start

# run tests
pnpm test
```

---

## 📖 Notes

- Keep all environment variables in `.env.local`.
- Run `pnpm lint` before committing.
- Do **not** commit `.env` or sensitive keys.
- Update documentation regularly.
